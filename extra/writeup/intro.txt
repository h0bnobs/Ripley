

One of the most exciting parts of cyber security is the offensive side that consists of penetration testing, vulnerability assessments and ethical hacking.

The goal of this project is to develop a tool that can aid penetration testers in their work by automating some processes and providing a user-friendly interface to manage the results.

The motivation for the project comes from experience during work as a penetration tester, specifically during webapp and infrastructure tests. I have found that in order to give clients a comprehensive and worthwhile report, numerous specific and less prominent checks need to be performed. This can be a time-consuming process and may result in some checks being overlooked.



This should outline the motivation for the project and sketch the general background. It might also
signpost significant features of the rest of the report. Ideally, the introduction will both orient the
reader and capture his/her interest

One of the most promising general approaches for solving combinatorial
17 search problems is to generate an initial, suboptimal solution and then to
18 apply local repair heuristics. Techniques based on this approach have met
19 with empirical success on many combinatorial problems, including the trav-
20 eling salesman and graph partitioning problems (Johnson, Papadimitrou and
21 Yannakakis, 1988). Such techniques also have a long tradition in AI, most
22 notably in problem-solving systems that operate by debugging initial solu-
23 tions (Simmons, 1988; Sussman, 1975). In this paper, we describe how this
24 idea can be extended to constraint satisfaction problems (CSPs) in a natural
25 manner.
26 Most of the previous work on CSP algorithms has assumed a “construc-
27 tive” backtracking approach in which a partial assignment to the variables
28 is incrementally extended. In contrast, our method (Minton et al., 1990)
29 creates a complete, but inconsistent assignment and then repairs constraint

30 violations until a consistent assignment is achieved. The method is guided
31 by a simple ordering heuristic for repairing constraint violations: identify a
32 variable that is currently in conflict and select a new value that minimizes
33 the number of outstanding constraint violations.
34
We present empirical evidence showing that on some standard problems
35 our approach is considerably more efficient than traditional constructive
36 backtracking methods. For example, on the n-queens problem, our method
37 quickly finds solutions to the one million queens problem. We argue that
238 the reason that repair-based methods can outperform constructive methods
39 is because a complete assignment can be more informative in guiding search
40 than a partial assignment. However, the utility of the extra information is
41 domain dependent. To help clarify the nature of this potential advantage,
42 we present a theoretical analysis that describes how various problem charac-
43 teristics may affect the performance of the method. This analysis shows, for
44 example, how the “distance” between the current assignment and solution
45 (in terms of the minimum number of repairs that are required) affects the
46 expected utility of the heuristic.
47
The work described in this paper was inspired by a surprisingly effective
48 neural network developed by Adorf and Johnston (1990) for scheduling as-
49 tronomical observations on the Hubble Space Telescope. Our heuristic CSP
50 method was distilled from an analysis of the network. In the process of carry-
51 ing out the analysis, we discovered that the effectiveness of the network has
52 little to do with its connectionist implementation. Furthermore, the ideas
53 employed in the network can be implemented very efficiently within a sym-
54 bolic CSP framework. The symbolic implementation is extremely simple.
55 It also has the advantage that several different search strategies can be em-
56 ployed, although we have found that hill-climbing methods are particularly
57 well-suited for the applications that we have investigated.
58
We begin the paper with a brief review of Adorf and Johnston’s neural
59 network, and then describe our symbolic method for heuristic repair. Fol-
60 lowing this, we describe empirical results with the n-queens problem, graph-
61 colorability problems and the Hubble Space Telescope scheduling application.
62 Finally, we consider a theoretical model identifying general problem charac-
63 teristics that influence the performance of the method. We include a second
64 gratuitous citation to ourselves to illustrate a short citation (Minton et al.,
65 1990).